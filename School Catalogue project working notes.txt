In this project I'll create a parent class School with three child classes. The parent and child classes will have the following properties, getters, setters, and methods:
	- School
		- Properties: 
			- name (string)
			- level (one of three strings: 'primary', 'middle', or 'high')
			- numberOfStudents (number)
		- Getters: all properties have getters
		- Setters: the numberOfStudents property has a setter
		- Methods: 
			- .quickFacts() 
			- .pickSubstituteTeacher() (this is a static method)

	- Primary
		- Includes everything in the School class, plus one additional property
		- Properties: 
			- pickupPolicy (string)

	- Middle
		- Does not include any additional properties or methods

	- High
		- Includes everything in the School class, plus one additional property
		- Properties: 
			- sportsTeams (array of strings)

==========
Challenges:
Create a middle school class (done)
Add more properties to each class (averageTestScores, schoolOverview, etc.)
Create a class called SchoolCatalog that holds a collection of schools. Create an instance of SchoolCatalog for primary, middle, and high schools.

			
==========
Tests!

const mySchool = new School('Franklin', 'senior', 885);
School.pickSubstituteTeacher(['Sub One','Substitute Two','Teacher Three']);


const lorraineHansbury = new PrimarySchool('Lorraine Hansbury', 514, 'Students must be picked up by a parent, guardian, or a family member over the age of 13.');

School.pickSubstituteTeacher(['Jamal Crawford', 'Lou Williams', 'J. R. Smith', 'James Harden', 'Jason Terry', 'Manu Ginobli']);


const alSmith = new HighSchool('Al E. Smith', 415, ['Baseball', 'Basketball', 'Volleyball', 'Track and Field']);